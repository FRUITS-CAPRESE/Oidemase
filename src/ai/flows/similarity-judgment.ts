// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Determines the similarity between two tourist spots based on their characteristics.
 *
 * - assessSpotSimilarity - A function that assesses the similarity between two tourist spots.
 * - SimilarityJudgmentInput - The input type for the assessSpotSimilarity function.
 * - SimilarityJudgmentOutput - The return type for the assessSpotSimilarity function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SimilarityJudgmentInputSchema = z.object({
  spot1Description: z.string().describe('Description of the first tourist spot.'),
  spot2Description: z.string().describe('Description of the second tourist spot.'),
});
export type SimilarityJudgmentInput = z.infer<typeof SimilarityJudgmentInputSchema>;

const SimilarityJudgmentOutputSchema = z.object({
  similarityScore: z.number().describe('A numerical score indicating the similarity between the two spots (0-1, 1 being most similar).'),
  reason: z.string().describe('Explanation of why the two spots are similar or dissimilar.'),
});
export type SimilarityJudgmentOutput = z.infer<typeof SimilarityJudgmentOutputSchema>;

export async function assessSpotSimilarity(input: SimilarityJudgmentInput): Promise<SimilarityJudgmentOutput> {
  return similarityJudgmentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'similarityJudgmentPrompt',
  input: {schema: SimilarityJudgmentInputSchema},
  output: {schema: SimilarityJudgmentOutputSchema},
  prompt: `You are an AI specializing in determining the similarity between two tourist spots.

You will be given descriptions of two spots and must determine how similar they are based on their characteristics, experiences they offer, and target audience.

Provide a similarity score between 0 and 1 (inclusive), where 1 indicates the spots are highly similar and 0 indicates they are completely dissimilar.
Also, provide a brief explanation of why you assigned the similarity score that you did.

Spot 1 Description: {{{spot1Description}}}
Spot 2 Description: {{{spot2Description}}}

Respond with a JSON object with the following structure:
{
  "similarityScore": number,
  "reason": string
}
`,
});

const similarityJudgmentFlow = ai.defineFlow(
  {
    name: 'similarityJudgmentFlow',
    inputSchema: SimilarityJudgmentInputSchema,
    outputSchema: SimilarityJudgmentOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
